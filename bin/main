#!/usr/bin/env ruby
class TicTacToe
  def initialize    
    @numbers = (1..9).to_a
    @winning_streaks = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9],
      [1, 4, 7],
      [2, 5, 8],
      [3, 6, 9],
      [1, 5, 9],
      [3, 5, 7]
    ]
    @arr_player1 = []
    @arr_player2 = []
    
    @pick
    @player1 = "Player 1" 
    @player2 = "Player 2"
  end

  def display
    print "\n#{@numbers[0]} | #{@numbers[1]} | #{@numbers[2]}\n----------\n#{@numbers[3]} | #{@numbers[4]} | #{@numbers[5]}\n----------\n#{@numbers[6]} | #{@numbers[7]} | #{@numbers[8]}\n\n"
  end

  def play
    
    round = 1
    while round <= @numbers.size do
      player = who_player(round)
      until is_valid?(@pick) and is_unique?(@pick)
        prompt_message(player)
        @pick = gets.chomp.to_i
      end
      player_array(player) << @pick
      @numbers[@pick - 1] = player_totem(player)
      display
      p @arr_player1
      p @arr_player2
      puts is_win?
      puts is_tie?
      break if is_win? or is_tie?
      round += 1
    end    

  end

  def player_array(player)
    if player == @player1
      return @arr_player1
    else
      return @arr_player2
    end
  end

  def player_totem(player)
    if player == @player1
      return "X"
    else
      return "O"
    end
  end

  def prompt_message(player)
    puts "#{player}: pick a number from the board:"
  end

  def who_player(i_round)
    if i_round % 2 == 0 
      return @player2
    else
      return @player1
    end
  end


  def is_valid?(pick)
    return true if @numbers.any?(pick) and pick.is_a? Integer
  end

  def is_unique?(pick)
    return true if @arr_player1.none?(pick) and @arr_player2.none?(pick)
  end

  def is_win?
    @winning_streaks.each do |x|
      if (@arr_player1 & x).to_a.sort == x
        puts "Player 1 wins!"
        return true
      elsif (@arr_player2 & x).to_a.sort == x
        puts "Player 2 wins!"
        return true
      end
    end
    false
  end

  def is_tie?
    if @arr_player1.size + @arr_player2.size == 9 and is_win? == false
      puts "It's a tie! Play again."
      return true
    else
      return false
    end
  end

end

game = TicTacToe.new
game.display
game.play
