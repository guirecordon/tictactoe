#!/usr/bin/env ruby
class TicTacToe
  def initialize
    @numbers = (1..9).to_a
    @winning_streaks = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9],
      [1, 4, 7],
      [2, 5, 8],
      [3, 6, 9],
      [1, 5, 9],
      [3, 5, 7]
    ]
    @arr_player1 = []
    @arr_player2 = []
    
    @pick1
    @pick2
  end

  def display
    print "#{@numbers[0]} | #{@numbers[1]} | #{@numbers[2]}\n----------\n#{@numbers[3]} | #{@numbers[4]} | #{@numbers[5]}\n----------\n#{@numbers[6]} | #{@numbers[7]} | #{@numbers[8]}\n\n"
  end

  def play
    round until is_win? or is_tie?
  end

  def round

    until is_valid? and is_unique?
      puts "Player 1: Pick a number from the board."
      @pick1 = gets.chomp.to_i
    end
    @arr_player1 << @pick1
    @numbers[@pick1 - 1] = "X"
    display

    until is_valid? and is_unique?
      puts "Player 2: Pick a number from the board."
      @pick2 = gets.chomp.to_i
    end
    @arr_player2 << @pick2
    @numbers[@pick2 - 1] = "o"
    display

  end

  def is_valid?
    if @numbers.any?(@pick1) or @numbers.any?(@pick2) and @pick1.is_a? Integer or @pick2.is_a? Integer
      return true
    end
  end

  def is_unique?
    if @arr_player1.none?(@pick1) and @arr_player2.none?(@pick1)
      return true
    elsif @arr_player1.none?(@pick2) and @arr_player2.none?(@pick2) 
      return true
    end
  end

  def is_win?
    if @arr_player1.size >= 3
      @winning_streaks.each do |x|
        if @arr_player1 & x == x
          puts "Player 1 wins!"
        end
      end
    elsif @arr_player2.size >= 3
      @winning_streaks.each do |x|
        if @arr_player2 & x == x
          puts "Player 2 wins!"
        end
      end
    end
  end

  def is_tie?
    if @arr_player1.size + @arr_player2.size == 9 and is_win? == false
      return true
    end
  end

  def win_message
    puts "Player 1 wins"
  end

  def tie_game
    puts "It's a tie!"
  end

end

play = TicTacToe.new
play.display
play.play
